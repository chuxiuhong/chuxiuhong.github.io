<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>唯心不易</title><link>http://chuxiuhong.com/</link><description>Recent content on 唯心不易</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><lastBuildDate>Wed, 05 May 2021 20:46:52 +0800</lastBuildDate><atom:link href="http://chuxiuhong.com/index.xml" rel="self" type="application/rss+xml"/><item><title>Manjaro设置V2ray</title><link>http://chuxiuhong.com/post/manjaro-v2ray-setup/</link><pubDate>Wed, 05 May 2021 20:46:52 +0800</pubDate><guid>http://chuxiuhong.com/post/manjaro-v2ray-setup/</guid><description>题外话：最近一直想写一个实验，实验平台又必须用到Linux或者MacOS来搞，然而本机Win10本身带着Docker，虚拟机有冲突，WSL又</description></item><item><title>发布一个地理计算库rsgeo</title><link>http://chuxiuhong.com/post/rsgeo/</link><pubDate>Sat, 24 Apr 2021 19:07:10 +0800</pubDate><guid>http://chuxiuhong.com/post/rsgeo/</guid><description>我个人开发了一个地理计算库rsgeo，采用Rust开发，目前已发布至crates和github，欢迎大家使用和反馈，有愿意提PR的更欢迎！ 安</description></item><item><title>衡量轨迹相似度算法</title><link>http://chuxiuhong.com/post/trajectory-distance/</link><pubDate>Thu, 15 Apr 2021 23:26:22 +0800</pubDate><guid>http://chuxiuhong.com/post/trajectory-distance/</guid><description>这篇文章内容主要是来源于[1]这篇文章，这篇文章主要是一篇对衡量轨迹之间相似度的综述论文，在此我总结一下提一提干货。 概念 轨迹采样点：轨迹采样</description></item><item><title>Postgresql数据库分表</title><link>http://chuxiuhong.com/post/postgresql-table-partitioning/</link><pubDate>Fri, 09 Apr 2021 00:32:59 +0800</pubDate><guid>http://chuxiuhong.com/post/postgresql-table-partitioning/</guid><description>起因 最近在实际的项目中需要把300W+的数据换到新数据库里（原因是SQL Server的存储过于废），与此同时，数据源还在源源不断地生成新数据</description></item><item><title>Rust和Go离线开发指南</title><link>http://chuxiuhong.com/post/move-rust-go-env/</link><pubDate>Sat, 03 Apr 2021 13:51:32 +0800</pubDate><guid>http://chuxiuhong.com/post/move-rust-go-env/</guid><description>这本身毫无技术难度，写出来主要是因为这个问题大多数人并不在意，而当单位是物理隔离的内网时，这个问题又不得不解决。本文主要解决Windows下</description></item><item><title>Rust中对字节数据使用正则</title><link>http://chuxiuhong.com/post/rust-byte-regex/</link><pubDate>Tue, 30 Mar 2021 23:30:27 +0800</pubDate><guid>http://chuxiuhong.com/post/rust-byte-regex/</guid><description>regex这个Crate是Rust中常用的正则表达式处理库。除了常见的字符串以外，它还提供了直接对字节进行处理的接口，这大大有助于进行某些底</description></item><item><title>Rust调用CMD不执行的问题</title><link>http://chuxiuhong.com/post/rust_cmd/</link><pubDate>Fri, 12 Mar 2021 19:55:37 +0800</pubDate><guid>http://chuxiuhong.com/post/rust_cmd/</guid><description>背景：最近希望利用Tshark来做一些数据包过滤分析的功能，主体用Rust写，调用部分懒得找dll的资料，想直接用CMD命令来执行后截取标准</description></item><item><title>Rust设计模式中文翻译</title><link>http://chuxiuhong.com/post/rust-design-zh-intro/</link><pubDate>Sat, 13 Feb 2021 16:31:30 +0800</pubDate><guid>http://chuxiuhong.com/post/rust-design-zh-intro/</guid><description>最近花费了些力气翻译了Rust设计模式中文版，在线可访问文档链接为：http://chuxiuhong.com/chuxiuhong-rus</description></item><item><title>C#调用Rust导出的DLL</title><link>http://chuxiuhong.com/post/csharp-rust-dll/</link><pubDate>Mon, 25 Jan 2021 00:06:00 +0800</pubDate><guid>http://chuxiuhong.com/post/csharp-rust-dll/</guid><description>实现目的 最近一直在用Rust做一些底层库，性能用起来也很顺手，但是碍于Rust目前极差的GUI生态，还是决定将Rust导出为DLL然后用C#</description></item><item><title>一些学函数式编程的体会</title><link>http://chuxiuhong.com/post/%E4%B8%80%E4%BA%9B%E5%AD%A6%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B%E7%9A%84%E4%BD%93%E4%BC%9A/</link><pubDate>Thu, 23 Jul 2020 23:44:11 +0800</pubDate><guid>http://chuxiuhong.com/post/%E4%B8%80%E4%BA%9B%E5%AD%A6%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B%E7%9A%84%E4%BD%93%E4%BC%9A/</guid><description>起因 最初看到函数式编程的东西是在知乎等地方看到关于Lisp的材料，后来又断断续续的看到了很多的相关面试题，比如如何不用循环处理XX问题。不过</description></item><item><title>过滤器系列（三）—— RSQF</title><link>http://chuxiuhong.com/post/rsqf-filter/</link><pubDate>Sat, 07 Apr 2018 00:32:20 +0800</pubDate><guid>http://chuxiuhong.com/post/rsqf-filter/</guid><description>这个过滤器本身是一篇论文中提出的过滤器的简化版本，去掉了计数功能，我觉得简化版本应用的可能也很广，专门写一篇简化版本的RSQF。RSQF全称</description></item><item><title>过滤器系列（二）—— Cuckoo filter</title><link>http://chuxiuhong.com/post/cuckoo-filter/</link><pubDate>Sat, 06 Jan 2018 23:29:20 +0800</pubDate><guid>http://chuxiuhong.com/post/cuckoo-filter/</guid><description>这一篇讲的是布谷过滤器(cuckoo fliter)，这个名字来源于更早发表的布谷散列(cuckoo hash)，尽管我也不知道为什么当初要给这</description></item><item><title>过滤器系列（一）—— Bloom filter</title><link>http://chuxiuhong.com/post/bloom-filter/</link><pubDate>Thu, 04 Jan 2018 23:00:20 +0800</pubDate><guid>http://chuxiuhong.com/post/bloom-filter/</guid><description>因为要做过滤器相关内容，最近读了一些过滤器方面的文章，准备从中提取主要思想写几篇博客。 作为这系列的第一篇文章，首先得讲一下过滤器是干什么用的</description></item><item><title>基于用户击键特征的身份鉴别系统</title><link>http://chuxiuhong.com/post/keystroke/</link><pubDate>Sat, 14 Oct 2017 20:13:20 +0800</pubDate><guid>http://chuxiuhong.com/post/keystroke/</guid><description>简单来说，我们要做的就是一种通过用户敲击键盘的习惯进行身份鉴别的系统。国内外之前有一些相关研究，但是通常是数千条数据训练，而且不能随意改变敲</description></item><item><title>100行实现草榴种子爬虫</title><link>http://chuxiuhong.com/post/spider-caoliu/</link><pubDate>Fri, 11 Aug 2017 06:43:20 +0800</pubDate><guid>http://chuxiuhong.com/post/spider-caoliu/</guid><description>本来这个技术含量不足以写进博客的，不过想想好久不写博客都快把markdown语法忘了（汗颜），之前做的信安比赛的项目未来会写一篇总结。 代码比</description></item><item><title>彩色和灰度图片直方图均衡化</title><link>http://chuxiuhong.com/post/pic-his/</link><pubDate>Fri, 19 May 2017 23:58:32 +0800</pubDate><guid>http://chuxiuhong.com/post/pic-his/</guid><description>直方图均衡化是对于一幅图像，其具有多个灰度等级的像素，我们尽可能让这些灰度等级出现频率的概率密度函数趋近于常数。这么做的意义在哪里？当一幅图</description></item><item><title>基于django做HTTP代理服务器</title><link>http://chuxiuhong.com/post/django-http-proxy/</link><pubDate>Sun, 07 May 2017 08:19:37 +0800</pubDate><guid>http://chuxiuhong.com/post/django-http-proxy/</guid><description>这个项目实现了： a) 网站过滤：允许/不允许访问某些网站； b) 用户过滤：支持/不支持某些用户访问外部网站； c) 网站引导：将用户对某个网站的访问引导至</description></item><item><title>RSA加解密实现</title><link>http://chuxiuhong.com/post/rsa/</link><pubDate>Wed, 26 Apr 2017 22:52:37 +0800</pubDate><guid>http://chuxiuhong.com/post/rsa/</guid><description>RSA是由MIT的三位数学家R.L.Rivest，A.Shamir和L.Adleman[Rivest等1978, 1979]提出的一种用数论构</description></item><item><title>用树莓派从零开始做一个家庭监控</title><link>http://chuxiuhong.com/post/shumeipai/</link><pubDate>Mon, 19 Dec 2016 09:14:20 +0800</pubDate><guid>http://chuxiuhong.com/post/shumeipai/</guid><description>先说好，我们的家庭监控是每分钟的照片的监控，并不是真正的实时视频，这种实时视频树莓派性能可能不够。 我们这一次工程的大体步骤： 硬件准备 我们至少</description></item><item><title>卷积神经网络提取特征并用于SVM</title><link>http://chuxiuhong.com/post/cnn-svm/</link><pubDate>Mon, 05 Dec 2016 09:58:20 +0800</pubDate><guid>http://chuxiuhong.com/post/cnn-svm/</guid><description>目标是对UCI的手写数字数据集进行识别，样本数量大约是1600个。图片大小为16x16。要求必须使用SVM作为二分类的分类器。 本文重点是如何</description></item><item><title>不到一百行实现一个命令词识别</title><link>http://chuxiuhong.com/post/minglingci/</link><pubDate>Fri, 02 Dec 2016 09:19:20 +0800</pubDate><guid>http://chuxiuhong.com/post/minglingci/</guid><description>想要容易理解核心的特征计算的话建议先去看看我之前的听歌识曲的文章，传送门:https://chuxiuhong.com/post/shaza</description></item><item><title>银行家算法学习笔记</title><link>http://chuxiuhong.com/post/banker-algo/</link><pubDate>Sat, 26 Nov 2016 12:41:20 +0800</pubDate><guid>http://chuxiuhong.com/post/banker-algo/</guid><description>死锁避免——银行家算法的应用背景 要想说银行家，首先得说死锁问题，因为银行家算法就是为了死锁避免提出的。那么，什么是死锁？简单的举个例子：俩人</description></item><item><title>听歌识曲--用python实现一个音乐检索器</title><link>http://chuxiuhong.com/post/shazam/</link><pubDate>Mon, 14 Nov 2016 21:51:20 +0800</pubDate><guid>http://chuxiuhong.com/post/shazam/</guid><description>听歌识曲，顾名思义，用设备“听”歌曲，然后它要告诉你这是首什么歌。而且十之八九它还得把这首歌给你播放出来。这样的功能在QQ音乐等应用上早就出</description></item><item><title>用python实现逻辑回归</title><link>http://chuxiuhong.com/post/python-logistic/</link><pubDate>Wed, 02 Nov 2016 13:04:20 +0800</pubDate><guid>http://chuxiuhong.com/post/python-logistic/</guid><description>机器学习课程的一个实验，整理出来共享。 原理很简单，优化方法是用的梯度下降。后面有测试结果。 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25</description></item><item><title>利用KD树进行异常检测</title><link>http://chuxiuhong.com/post/kd-tree/</link><pubDate>Wed, 26 Oct 2016 19:41:20 +0800</pubDate><guid>http://chuxiuhong.com/post/kd-tree/</guid><description>什么是KD树 要说KD树，我们得先说一下什么是KNN算法。 KNN是k-NearestNeighbor的简称，原理很简单：当你有一堆已经标注好的</description></item><item><title>用python实现最长公共子序列算法(找到所有最长公共子串)</title><link>http://chuxiuhong.com/post/python-lcs-algo/</link><pubDate>Sat, 08 Oct 2016 19:03:20 +0800</pubDate><guid>http://chuxiuhong.com/post/python-lcs-algo/</guid><description>软件安全的一个小实验，正好复习一下LCS的写法。 实现LCS的算法和算法导论上的方式基本一致，都是先建好两个表，一个存储在(i,j)处当前最长</description></item><item><title>基于傅里叶变换和PyQt4开发一个简单的频率计数器</title><link>http://chuxiuhong.com/post/fft-pyqt4/</link><pubDate>Tue, 27 Sep 2016 21:52:20 +0800</pubDate><guid>http://chuxiuhong.com/post/fft-pyqt4/</guid><description>小学期的《信号与系统》课，要求写一个频率计数器，下面是我个人理解的频率计数 傅里叶变换的代码： 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24</description></item><item><title>Python 正则表达式入门（中级篇）</title><link>http://chuxiuhong.com/post/python-re-intro-2/</link><pubDate>Sun, 25 Sep 2016 23:09:20 +0800</pubDate><guid>http://chuxiuhong.com/post/python-re-intro-2/</guid><description>初级篇链接：https://chuxiuhong.com/post/python-re-intro-1/ 上一篇我们说在这一篇里，我们会介绍子</description></item><item><title>Python 正则表达式入门（初级篇）</title><link>http://chuxiuhong.com/post/python-re-intro-1/</link><pubDate>Mon, 19 Sep 2016 02:33:20 +0800</pubDate><guid>http://chuxiuhong.com/post/python-re-intro-1/</guid><description>本文主要为没有使用正则表达式经验的新手入门所写。 转载请写明出处 引子 首先说 正则表达式是什么？ 正则表达式，又称正规表示式、正规表示法、正规表达式</description></item><item><title/><link>http://chuxiuhong.com/about/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://chuxiuhong.com/about/</guid><description>关于我个人 大概是：好读书，不求甚解，每有会意,便欣然忘食。
个人从互联网开源项目和众多分享博客上获益良多，想着也许我也有些许值得拿出分享的小东西，便有此博客，希望大家批评指正，可在我这博客项目的issues下提交。
个人联系邮箱:chuxiuhong@chuxiuhong.com</description></item></channel></rss>